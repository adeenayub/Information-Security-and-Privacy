TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False  

    #Use a global lock to ensure the attacker is not able to cause race      conditions by issuing multiple threads to modify visible state or issue concurrent requests
    mycontext['lockcriticalsection'] = createlock() 

    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files
    if create:
      #create B file using create=true
      self.Bfile = openfile(self.Bfn, create)
      if self.Afn in listfiles():
        #if A exists in filesystem, open it
        self.Afile = openfile(self.Afn, False)
      else:
        #create it if it doesn't exist and add 'SE' to the readat file.
        self.Afile = openfile(self.Afn, create)
        mycontext['lockcriticalsection'].acquire(True)
        self.Afile.writeat('SE',0)
        mycontext['lockcriticalsection'].release()

    #if the argument passed to openfile is False create and open a B file and open A file
    else:
      #valid A file exists in the listed files hence no need to create it again
      self.Afile = openfile(self.Afn, False)
      #creating B file since it gets deleted every time close is called
      self.Bfile = openfile(self.Afn, True)


  def writeat(self,data,offset):
    
    #if a thread enters critical section(in this case, writing to an invalid file) the mutex lock ensures no other thread enters the critical section
    mycontext['lockcriticalsection'].acquire(True)
    # Write the requested data to the B file using the sandbox's writeat call
    self.Bfile.writeat(data,offset)
    #lock is released which means another thread can acquire the critical section
    mycontext['lockcriticalsection'].release()
  

  def readat(self,bytes,offset):
    
    mycontext['lockcriticalsection'].acquire(True)
    # Read from the A file using the sandbox's readat...
    validdata = self.Afile.readat(bytes,offset)
    mycontext['lockcriticalsection'].release()
    return validdata


  def close(self):
    #critical section acquired for reading B file
    mycontext['lockcriticalsection'].acquire(True)
    DatainB = self.Bfile.readat(None, 0)
    #critical section released
    mycontext['lockcriticalsection'].release()
    #storing the length of string DatainB which holds the file contents of B
    blen = len(DatainB)
    #checking if the first and last characters of B file are S and E respectively
    if DatainB[0] == 'S' and DatainB[blen - 1] == 'E' :
      #log(DatainB[0], DatainB[blen-1])
      #if yes, then update A file by deleting the old one, creating a new one and writing the contents of B inside
      self.Afile.close()
      removefile(self.Afn)
      self.Afile = openfile(self.Afn, True)
      mycontext['lockcriticalsection'].acquire(True)
      self.Afile.writeat(DatainB, 0)
      mycontext['lockcriticalsection'].release()
    self.Afile.close()
    self.Bfile.close()
    #in both cases(when B is valid or invalid) we ultimately remove B file
    removefile(self.Bfn)


def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
